#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

// Create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert at beginning
void insertAtBegin(int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != head)
            temp = temp->next;
        newNode->next = head;
        temp->next = newNode;
        head = newNode;
    }
}

// Insert at end
void insertAtEnd(int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }
}

// Display list
void displayList() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("Circular Linked List: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

// Helper for reverse display
void reverseDisplayHelper(struct Node* current, struct Node* stop) {
    if (current->next != stop)
        reverseDisplayHelper(current->next, stop);
    printf("%d ", current->data);
}

// Display list in reverse
void displayReverse() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    printf("Reverse Circular Linked List: ");
    reverseDisplayHelper(head, head);
    printf("\n");
}

// Search for a value
void search(int key) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    int index = 0;
    do {
        if (temp->data == key) {
            printf("Element %d found at position %d\n", key, index);
            return;
        }
        temp = temp->next;
        index++;
    } while (temp != head);
    printf("Element %d not found in the list.\n", key);
}

// Delete a node by value
void deleteNode(int key) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *temp = head, *prev = NULL;

    // If head is to be deleted
    if (head->data == key) {
        while (temp->next != head)
            temp = temp->next;
        if (head->next == head) {
            free(head);
            head = NULL;
        } else {
            temp->next = head->next;
            free(head);
            head = temp->next;
        }
        printf("Element %d deleted.\n", key);
        return;
    }

    // Traverse to find the node
    prev = head;
    temp = head->next;
    while (temp != head && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == head) {
        printf("Element %d not found.\n", key);
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("Element %d deleted.\n", key);
}

// Main function
int main() {
    insertAtEnd(10);
    insertAtEnd(20);
    insertAtBegin(5);
    insertAtEnd(30);
    insertAtBegin(1);

    displayList();
    displayReverse();

    search(20);
    search(99);

    deleteNode(5);
    displayList();

    deleteNode(1);
    displayList();

    deleteNode(99);

    return 0;
}
